/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 548.0, "series": [{"data": [[0.0, 5.0], [0.1, 6.0], [0.2, 6.0], [0.3, 6.0], [0.4, 6.0], [0.5, 6.0], [0.6, 6.0], [0.7, 7.0], [0.8, 7.0], [0.9, 7.0], [1.0, 7.0], [1.1, 7.0], [1.2, 7.0], [1.3, 7.0], [1.4, 7.0], [1.5, 7.0], [1.6, 7.0], [1.7, 7.0], [1.8, 7.0], [1.9, 7.0], [2.0, 7.0], [2.1, 7.0], [2.2, 7.0], [2.3, 7.0], [2.4, 7.0], [2.5, 7.0], [2.6, 7.0], [2.7, 7.0], [2.8, 7.0], [2.9, 7.0], [3.0, 7.0], [3.1, 7.0], [3.2, 7.0], [3.3, 7.0], [3.4, 7.0], [3.5, 7.0], [3.6, 7.0], [3.7, 7.0], [3.8, 7.0], [3.9, 7.0], [4.0, 7.0], [4.1, 7.0], [4.2, 7.0], [4.3, 8.0], [4.4, 8.0], [4.5, 8.0], [4.6, 8.0], [4.7, 8.0], [4.8, 8.0], [4.9, 8.0], [5.0, 8.0], [5.1, 8.0], [5.2, 8.0], [5.3, 8.0], [5.4, 8.0], [5.5, 8.0], [5.6, 8.0], [5.7, 8.0], [5.8, 8.0], [5.9, 8.0], [6.0, 8.0], [6.1, 8.0], [6.2, 8.0], [6.3, 8.0], [6.4, 8.0], [6.5, 8.0], [6.6, 8.0], [6.7, 8.0], [6.8, 8.0], [6.9, 8.0], [7.0, 8.0], [7.1, 8.0], [7.2, 8.0], [7.3, 8.0], [7.4, 8.0], [7.5, 8.0], [7.6, 8.0], [7.7, 8.0], [7.8, 8.0], [7.9, 8.0], [8.0, 8.0], [8.1, 8.0], [8.2, 8.0], [8.3, 8.0], [8.4, 8.0], [8.5, 8.0], [8.6, 8.0], [8.7, 8.0], [8.8, 8.0], [8.9, 8.0], [9.0, 8.0], [9.1, 8.0], [9.2, 8.0], [9.3, 8.0], [9.4, 8.0], [9.5, 8.0], [9.6, 8.0], [9.7, 8.0], [9.8, 8.0], [9.9, 8.0], [10.0, 8.0], [10.1, 8.0], [10.2, 8.0], [10.3, 8.0], [10.4, 8.0], [10.5, 8.0], [10.6, 8.0], [10.7, 8.0], [10.8, 8.0], [10.9, 8.0], [11.0, 8.0], [11.1, 8.0], [11.2, 8.0], [11.3, 8.0], [11.4, 8.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 8.0], [14.2, 8.0], [14.3, 8.0], [14.4, 8.0], [14.5, 8.0], [14.6, 8.0], [14.7, 8.0], [14.8, 8.0], [14.9, 8.0], [15.0, 8.0], [15.1, 8.0], [15.2, 8.0], [15.3, 8.0], [15.4, 8.0], [15.5, 8.0], [15.6, 8.0], [15.7, 8.0], [15.8, 8.0], [15.9, 8.0], [16.0, 8.0], [16.1, 8.0], [16.2, 8.0], [16.3, 8.0], [16.4, 8.0], [16.5, 8.0], [16.6, 8.0], [16.7, 8.0], [16.8, 8.0], [16.9, 8.0], [17.0, 8.0], [17.1, 8.0], [17.2, 8.0], [17.3, 8.0], [17.4, 8.0], [17.5, 8.0], [17.6, 8.0], [17.7, 9.0], [17.8, 9.0], [17.9, 9.0], [18.0, 9.0], [18.1, 9.0], [18.2, 9.0], [18.3, 9.0], [18.4, 9.0], [18.5, 9.0], [18.6, 9.0], [18.7, 9.0], [18.8, 9.0], [18.9, 9.0], [19.0, 9.0], [19.1, 9.0], [19.2, 9.0], [19.3, 9.0], [19.4, 9.0], [19.5, 9.0], [19.6, 9.0], [19.7, 9.0], [19.8, 9.0], [19.9, 9.0], [20.0, 9.0], [20.1, 9.0], [20.2, 9.0], [20.3, 9.0], [20.4, 9.0], [20.5, 9.0], [20.6, 9.0], [20.7, 9.0], [20.8, 9.0], [20.9, 9.0], [21.0, 9.0], [21.1, 9.0], [21.2, 9.0], [21.3, 9.0], [21.4, 9.0], [21.5, 9.0], [21.6, 9.0], [21.7, 9.0], [21.8, 9.0], [21.9, 9.0], [22.0, 9.0], [22.1, 9.0], [22.2, 9.0], [22.3, 9.0], [22.4, 9.0], [22.5, 9.0], [22.6, 9.0], [22.7, 9.0], [22.8, 9.0], [22.9, 9.0], [23.0, 9.0], [23.1, 9.0], [23.2, 9.0], [23.3, 9.0], [23.4, 9.0], [23.5, 9.0], [23.6, 9.0], [23.7, 9.0], [23.8, 9.0], [23.9, 9.0], [24.0, 9.0], [24.1, 9.0], [24.2, 9.0], [24.3, 9.0], [24.4, 9.0], [24.5, 9.0], [24.6, 9.0], [24.7, 9.0], [24.8, 9.0], [24.9, 9.0], [25.0, 9.0], [25.1, 9.0], [25.2, 9.0], [25.3, 9.0], [25.4, 9.0], [25.5, 9.0], [25.6, 9.0], [25.7, 9.0], [25.8, 9.0], [25.9, 9.0], [26.0, 9.0], [26.1, 9.0], [26.2, 9.0], [26.3, 9.0], [26.4, 9.0], [26.5, 9.0], [26.6, 9.0], [26.7, 9.0], [26.8, 9.0], [26.9, 9.0], [27.0, 9.0], [27.1, 9.0], [27.2, 9.0], [27.3, 9.0], [27.4, 9.0], [27.5, 9.0], [27.6, 9.0], [27.7, 9.0], [27.8, 9.0], [27.9, 9.0], [28.0, 9.0], [28.1, 9.0], [28.2, 9.0], [28.3, 9.0], [28.4, 9.0], [28.5, 9.0], [28.6, 9.0], [28.7, 9.0], [28.8, 9.0], [28.9, 9.0], [29.0, 9.0], [29.1, 9.0], [29.2, 9.0], [29.3, 9.0], [29.4, 9.0], [29.5, 9.0], [29.6, 9.0], [29.7, 9.0], [29.8, 9.0], [29.9, 9.0], [30.0, 9.0], [30.1, 9.0], [30.2, 9.0], [30.3, 9.0], [30.4, 9.0], [30.5, 9.0], [30.6, 9.0], [30.7, 9.0], [30.8, 9.0], [30.9, 9.0], [31.0, 9.0], [31.1, 9.0], [31.2, 9.0], [31.3, 9.0], [31.4, 9.0], [31.5, 9.0], [31.6, 9.0], [31.7, 9.0], [31.8, 9.0], [31.9, 9.0], [32.0, 9.0], [32.1, 9.0], [32.2, 9.0], [32.3, 9.0], [32.4, 9.0], [32.5, 9.0], [32.6, 9.0], [32.7, 9.0], [32.8, 9.0], [32.9, 9.0], [33.0, 9.0], [33.1, 9.0], [33.2, 9.0], [33.3, 9.0], [33.4, 9.0], [33.5, 9.0], [33.6, 9.0], [33.7, 9.0], [33.8, 9.0], [33.9, 9.0], [34.0, 9.0], [34.1, 9.0], [34.2, 9.0], [34.3, 9.0], [34.4, 9.0], [34.5, 9.0], [34.6, 9.0], [34.7, 9.0], [34.8, 9.0], [34.9, 9.0], [35.0, 9.0], [35.1, 9.0], [35.2, 9.0], [35.3, 9.0], [35.4, 9.0], [35.5, 9.0], [35.6, 9.0], [35.7, 9.0], [35.8, 10.0], [35.9, 10.0], [36.0, 10.0], [36.1, 10.0], [36.2, 10.0], [36.3, 10.0], [36.4, 10.0], [36.5, 10.0], [36.6, 10.0], [36.7, 10.0], [36.8, 10.0], [36.9, 10.0], [37.0, 10.0], [37.1, 10.0], [37.2, 10.0], [37.3, 10.0], [37.4, 10.0], [37.5, 10.0], [37.6, 10.0], [37.7, 10.0], [37.8, 10.0], [37.9, 10.0], [38.0, 10.0], [38.1, 10.0], [38.2, 10.0], [38.3, 10.0], [38.4, 10.0], [38.5, 10.0], [38.6, 10.0], [38.7, 10.0], [38.8, 10.0], [38.9, 10.0], [39.0, 10.0], [39.1, 10.0], [39.2, 10.0], [39.3, 10.0], [39.4, 10.0], [39.5, 10.0], [39.6, 10.0], [39.7, 10.0], [39.8, 10.0], [39.9, 10.0], [40.0, 10.0], [40.1, 10.0], [40.2, 10.0], [40.3, 10.0], [40.4, 10.0], [40.5, 10.0], [40.6, 10.0], [40.7, 10.0], [40.8, 10.0], [40.9, 10.0], [41.0, 10.0], [41.1, 10.0], [41.2, 10.0], [41.3, 10.0], [41.4, 10.0], [41.5, 10.0], [41.6, 10.0], [41.7, 10.0], [41.8, 10.0], [41.9, 10.0], [42.0, 10.0], [42.1, 10.0], [42.2, 10.0], [42.3, 10.0], [42.4, 10.0], [42.5, 10.0], [42.6, 10.0], [42.7, 10.0], [42.8, 10.0], [42.9, 10.0], [43.0, 10.0], [43.1, 10.0], [43.2, 10.0], [43.3, 10.0], [43.4, 10.0], [43.5, 10.0], [43.6, 10.0], [43.7, 10.0], [43.8, 10.0], [43.9, 10.0], [44.0, 10.0], [44.1, 10.0], [44.2, 10.0], [44.3, 10.0], [44.4, 10.0], [44.5, 10.0], [44.6, 10.0], [44.7, 10.0], [44.8, 10.0], [44.9, 10.0], [45.0, 10.0], [45.1, 10.0], [45.2, 10.0], [45.3, 10.0], [45.4, 10.0], [45.5, 10.0], [45.6, 10.0], [45.7, 10.0], [45.8, 10.0], [45.9, 10.0], [46.0, 10.0], [46.1, 10.0], [46.2, 10.0], [46.3, 10.0], [46.4, 10.0], [46.5, 10.0], [46.6, 10.0], [46.7, 10.0], [46.8, 10.0], [46.9, 10.0], [47.0, 10.0], [47.1, 10.0], [47.2, 10.0], [47.3, 10.0], [47.4, 10.0], [47.5, 10.0], [47.6, 10.0], [47.7, 10.0], [47.8, 10.0], [47.9, 10.0], [48.0, 10.0], [48.1, 10.0], [48.2, 10.0], [48.3, 10.0], [48.4, 10.0], [48.5, 10.0], [48.6, 10.0], [48.7, 10.0], [48.8, 10.0], [48.9, 10.0], [49.0, 10.0], [49.1, 10.0], [49.2, 10.0], [49.3, 10.0], [49.4, 10.0], [49.5, 10.0], [49.6, 10.0], [49.7, 10.0], [49.8, 10.0], [49.9, 10.0], [50.0, 10.0], [50.1, 10.0], [50.2, 10.0], [50.3, 10.0], [50.4, 10.0], [50.5, 10.0], [50.6, 10.0], [50.7, 10.0], [50.8, 10.0], [50.9, 10.0], [51.0, 10.0], [51.1, 10.0], [51.2, 10.0], [51.3, 10.0], [51.4, 10.0], [51.5, 10.0], [51.6, 10.0], [51.7, 10.0], [51.8, 10.0], [51.9, 10.0], [52.0, 10.0], [52.1, 10.0], [52.2, 10.0], [52.3, 10.0], [52.4, 10.0], [52.5, 10.0], [52.6, 10.0], [52.7, 10.0], [52.8, 10.0], [52.9, 10.0], [53.0, 10.0], [53.1, 11.0], [53.2, 11.0], [53.3, 11.0], [53.4, 11.0], [53.5, 11.0], [53.6, 11.0], [53.7, 11.0], [53.8, 11.0], [53.9, 11.0], [54.0, 11.0], [54.1, 11.0], [54.2, 11.0], [54.3, 11.0], [54.4, 11.0], [54.5, 11.0], [54.6, 11.0], [54.7, 11.0], [54.8, 11.0], [54.9, 11.0], [55.0, 11.0], [55.1, 11.0], [55.2, 11.0], [55.3, 11.0], [55.4, 11.0], [55.5, 11.0], [55.6, 11.0], [55.7, 11.0], [55.8, 11.0], [55.9, 11.0], [56.0, 11.0], [56.1, 11.0], [56.2, 11.0], [56.3, 11.0], [56.4, 11.0], [56.5, 11.0], [56.6, 11.0], [56.7, 11.0], [56.8, 11.0], [56.9, 11.0], [57.0, 11.0], [57.1, 11.0], [57.2, 11.0], [57.3, 11.0], [57.4, 11.0], [57.5, 11.0], [57.6, 11.0], [57.7, 11.0], [57.8, 11.0], [57.9, 11.0], [58.0, 11.0], [58.1, 11.0], [58.2, 11.0], [58.3, 11.0], [58.4, 11.0], [58.5, 11.0], [58.6, 11.0], [58.7, 11.0], [58.8, 11.0], [58.9, 11.0], [59.0, 11.0], [59.1, 11.0], [59.2, 11.0], [59.3, 11.0], [59.4, 11.0], [59.5, 11.0], [59.6, 11.0], [59.7, 11.0], [59.8, 11.0], [59.9, 11.0], [60.0, 11.0], [60.1, 11.0], [60.2, 11.0], [60.3, 11.0], [60.4, 11.0], [60.5, 11.0], [60.6, 11.0], [60.7, 11.0], [60.8, 11.0], [60.9, 11.0], [61.0, 11.0], [61.1, 11.0], [61.2, 11.0], [61.3, 11.0], [61.4, 11.0], [61.5, 11.0], [61.6, 11.0], [61.7, 12.0], [61.8, 12.0], [61.9, 12.0], [62.0, 12.0], [62.1, 12.0], [62.2, 12.0], [62.3, 12.0], [62.4, 12.0], [62.5, 12.0], [62.6, 12.0], [62.7, 12.0], [62.8, 12.0], [62.9, 12.0], [63.0, 12.0], [63.1, 12.0], [63.2, 12.0], [63.3, 12.0], [63.4, 12.0], [63.5, 12.0], [63.6, 12.0], [63.7, 12.0], [63.8, 12.0], [63.9, 12.0], [64.0, 12.0], [64.1, 12.0], [64.2, 12.0], [64.3, 12.0], [64.4, 12.0], [64.5, 12.0], [64.6, 12.0], [64.7, 12.0], [64.8, 12.0], [64.9, 12.0], [65.0, 12.0], [65.1, 12.0], [65.2, 12.0], [65.3, 12.0], [65.4, 12.0], [65.5, 12.0], [65.6, 12.0], [65.7, 12.0], [65.8, 12.0], [65.9, 12.0], [66.0, 12.0], [66.1, 12.0], [66.2, 12.0], [66.3, 12.0], [66.4, 12.0], [66.5, 12.0], [66.6, 13.0], [66.7, 13.0], [66.8, 13.0], [66.9, 13.0], [67.0, 13.0], [67.1, 13.0], [67.2, 13.0], [67.3, 13.0], [67.4, 13.0], [67.5, 13.0], [67.6, 13.0], [67.7, 13.0], [67.8, 13.0], [67.9, 13.0], [68.0, 13.0], [68.1, 13.0], [68.2, 13.0], [68.3, 13.0], [68.4, 13.0], [68.5, 13.0], [68.6, 13.0], [68.7, 13.0], [68.8, 13.0], [68.9, 13.0], [69.0, 13.0], [69.1, 13.0], [69.2, 13.0], [69.3, 13.0], [69.4, 13.0], [69.5, 13.0], [69.6, 13.0], [69.7, 13.0], [69.8, 13.0], [69.9, 13.0], [70.0, 13.0], [70.1, 13.0], [70.2, 13.0], [70.3, 13.0], [70.4, 13.0], [70.5, 13.0], [70.6, 13.0], [70.7, 13.0], [70.8, 13.0], [70.9, 13.0], [71.0, 14.0], [71.1, 14.0], [71.2, 14.0], [71.3, 14.0], [71.4, 14.0], [71.5, 14.0], [71.6, 14.0], [71.7, 14.0], [71.8, 14.0], [71.9, 14.0], [72.0, 14.0], [72.1, 14.0], [72.2, 14.0], [72.3, 14.0], [72.4, 14.0], [72.5, 14.0], [72.6, 14.0], [72.7, 14.0], [72.8, 14.0], [72.9, 14.0], [73.0, 14.0], [73.1, 14.0], [73.2, 14.0], [73.3, 14.0], [73.4, 14.0], [73.5, 14.0], [73.6, 15.0], [73.7, 15.0], [73.8, 15.0], [73.9, 15.0], [74.0, 15.0], [74.1, 15.0], [74.2, 15.0], [74.3, 15.0], [74.4, 15.0], [74.5, 15.0], [74.6, 15.0], [74.7, 15.0], [74.8, 15.0], [74.9, 15.0], [75.0, 15.0], [75.1, 15.0], [75.2, 15.0], [75.3, 15.0], [75.4, 16.0], [75.5, 16.0], [75.6, 16.0], [75.7, 16.0], [75.8, 16.0], [75.9, 16.0], [76.0, 16.0], [76.1, 16.0], [76.2, 16.0], [76.3, 16.0], [76.4, 17.0], [76.5, 17.0], [76.6, 17.0], [76.7, 17.0], [76.8, 17.0], [76.9, 17.0], [77.0, 17.0], [77.1, 17.0], [77.2, 17.0], [77.3, 17.0], [77.4, 17.0], [77.5, 18.0], [77.6, 18.0], [77.7, 18.0], [77.8, 18.0], [77.9, 18.0], [78.0, 18.0], [78.1, 18.0], [78.2, 18.0], [78.3, 18.0], [78.4, 18.0], [78.5, 18.0], [78.6, 18.0], [78.7, 19.0], [78.8, 19.0], [78.9, 19.0], [79.0, 19.0], [79.1, 19.0], [79.2, 19.0], [79.3, 19.0], [79.4, 19.0], [79.5, 19.0], [79.6, 19.0], [79.7, 19.0], [79.8, 20.0], [79.9, 20.0], [80.0, 20.0], [80.1, 20.0], [80.2, 20.0], [80.3, 20.0], [80.4, 20.0], [80.5, 21.0], [80.6, 21.0], [80.7, 21.0], [80.8, 21.0], [80.9, 21.0], [81.0, 21.0], [81.1, 21.0], [81.2, 22.0], [81.3, 22.0], [81.4, 22.0], [81.5, 22.0], [81.6, 22.0], [81.7, 22.0], [81.8, 22.0], [81.9, 22.0], [82.0, 22.0], [82.1, 22.0], [82.2, 23.0], [82.3, 23.0], [82.4, 23.0], [82.5, 23.0], [82.6, 23.0], [82.7, 23.0], [82.8, 23.0], [82.9, 23.0], [83.0, 23.0], [83.1, 24.0], [83.2, 24.0], [83.3, 24.0], [83.4, 24.0], [83.5, 24.0], [83.6, 24.0], [83.7, 24.0], [83.8, 24.0], [83.9, 24.0], [84.0, 25.0], [84.1, 25.0], [84.2, 25.0], [84.3, 25.0], [84.4, 25.0], [84.5, 25.0], [84.6, 25.0], [84.7, 25.0], [84.8, 25.0], [84.9, 26.0], [85.0, 26.0], [85.1, 26.0], [85.2, 26.0], [85.3, 26.0], [85.4, 27.0], [85.5, 27.0], [85.6, 27.0], [85.7, 27.0], [85.8, 27.0], [85.9, 27.0], [86.0, 28.0], [86.1, 28.0], [86.2, 28.0], [86.3, 28.0], [86.4, 28.0], [86.5, 29.0], [86.6, 29.0], [86.7, 29.0], [86.8, 29.0], [86.9, 29.0], [87.0, 29.0], [87.1, 29.0], [87.2, 30.0], [87.3, 30.0], [87.4, 30.0], [87.5, 30.0], [87.6, 30.0], [87.7, 31.0], [87.8, 31.0], [87.9, 31.0], [88.0, 32.0], [88.1, 32.0], [88.2, 32.0], [88.3, 32.0], [88.4, 32.0], [88.5, 32.0], [88.6, 33.0], [88.7, 33.0], [88.8, 33.0], [88.9, 33.0], [89.0, 34.0], [89.1, 34.0], [89.2, 34.0], [89.3, 34.0], [89.4, 34.0], [89.5, 34.0], [89.6, 35.0], [89.7, 35.0], [89.8, 35.0], [89.9, 35.0], [90.0, 36.0], [90.1, 36.0], [90.2, 36.0], [90.3, 36.0], [90.4, 37.0], [90.5, 37.0], [90.6, 37.0], [90.7, 38.0], [90.8, 38.0], [90.9, 38.0], [91.0, 38.0], [91.1, 38.0], [91.2, 39.0], [91.3, 39.0], [91.4, 39.0], [91.5, 39.0], [91.6, 40.0], [91.7, 40.0], [91.8, 40.0], [91.9, 41.0], [92.0, 41.0], [92.1, 42.0], [92.2, 42.0], [92.3, 42.0], [92.4, 43.0], [92.5, 43.0], [92.6, 43.0], [92.7, 44.0], [92.8, 44.0], [92.9, 44.0], [93.0, 45.0], [93.1, 45.0], [93.2, 45.0], [93.3, 45.0], [93.4, 45.0], [93.5, 46.0], [93.6, 46.0], [93.7, 46.0], [93.8, 47.0], [93.9, 47.0], [94.0, 48.0], [94.1, 48.0], [94.2, 48.0], [94.3, 48.0], [94.4, 49.0], [94.5, 49.0], [94.6, 49.0], [94.7, 50.0], [94.8, 51.0], [94.9, 51.0], [95.0, 51.0], [95.1, 52.0], [95.2, 52.0], [95.3, 53.0], [95.4, 53.0], [95.5, 54.0], [95.6, 54.0], [95.7, 55.0], [95.8, 55.0], [95.9, 55.0], [96.0, 56.0], [96.1, 56.0], [96.2, 57.0], [96.3, 57.0], [96.4, 57.0], [96.5, 59.0], [96.6, 61.0], [96.7, 62.0], [96.8, 65.0], [96.9, 66.0], [97.0, 68.0], [97.1, 70.0], [97.2, 72.0], [97.3, 77.0], [97.4, 82.0], [97.5, 83.0], [97.6, 90.0], [97.7, 102.0], [97.8, 112.0], [97.9, 115.0], [98.0, 119.0], [98.1, 125.0], [98.2, 127.0], [98.3, 127.0], [98.4, 131.0], [98.5, 136.0], [98.6, 141.0], [98.7, 145.0], [98.8, 147.0], [98.9, 150.0], [99.0, 152.0], [99.1, 154.0], [99.2, 158.0], [99.3, 162.0], [99.4, 162.0], [99.5, 168.0], [99.6, 176.0], [99.7, 186.0], [99.8, 190.0], [99.9, 200.0]], "isOverall": false, "label": "Raw - Get Trip", "isController": false}, {"data": [[0.0, 35.0], [0.1, 37.0], [0.2, 41.0], [0.3, 47.0], [0.4, 49.0], [0.5, 55.0], [0.6, 59.0], [0.7, 64.0], [0.8, 67.0], [0.9, 72.0], [1.0, 75.0], [1.1, 77.0], [1.2, 82.0], [1.3, 86.0], [1.4, 89.0], [1.5, 92.0], [1.6, 94.0], [1.7, 96.0], [1.8, 100.0], [1.9, 102.0], [2.0, 106.0], [2.1, 110.0], [2.2, 111.0], [2.3, 112.0], [2.4, 115.0], [2.5, 117.0], [2.6, 118.0], [2.7, 121.0], [2.8, 123.0], [2.9, 125.0], [3.0, 126.0], [3.1, 127.0], [3.2, 128.0], [3.3, 128.0], [3.4, 130.0], [3.5, 131.0], [3.6, 132.0], [3.7, 135.0], [3.8, 136.0], [3.9, 137.0], [4.0, 138.0], [4.1, 139.0], [4.2, 140.0], [4.3, 141.0], [4.4, 143.0], [4.5, 145.0], [4.6, 147.0], [4.7, 148.0], [4.8, 149.0], [4.9, 149.0], [5.0, 150.0], [5.1, 152.0], [5.2, 153.0], [5.3, 154.0], [5.4, 155.0], [5.5, 155.0], [5.6, 156.0], [5.7, 157.0], [5.8, 158.0], [5.9, 159.0], [6.0, 160.0], [6.1, 161.0], [6.2, 162.0], [6.3, 164.0], [6.4, 166.0], [6.5, 167.0], [6.6, 169.0], [6.7, 170.0], [6.8, 171.0], [6.9, 172.0], [7.0, 173.0], [7.1, 175.0], [7.2, 177.0], [7.3, 178.0], [7.4, 180.0], [7.5, 181.0], [7.6, 183.0], [7.7, 185.0], [7.8, 186.0], [7.9, 187.0], [8.0, 188.0], [8.1, 190.0], [8.2, 190.0], [8.3, 191.0], [8.4, 191.0], [8.5, 193.0], [8.6, 193.0], [8.7, 197.0], [8.8, 198.0], [8.9, 199.0], [9.0, 201.0], [9.1, 201.0], [9.2, 202.0], [9.3, 204.0], [9.4, 204.0], [9.5, 204.0], [9.6, 205.0], [9.7, 205.0], [9.8, 205.0], [9.9, 206.0], [10.0, 207.0], [10.1, 208.0], [10.2, 209.0], [10.3, 210.0], [10.4, 212.0], [10.5, 214.0], [10.6, 214.0], [10.7, 214.0], [10.8, 215.0], [10.9, 216.0], [11.0, 217.0], [11.1, 219.0], [11.2, 219.0], [11.3, 220.0], [11.4, 220.0], [11.5, 221.0], [11.6, 223.0], [11.7, 224.0], [11.8, 225.0], [11.9, 226.0], [12.0, 227.0], [12.1, 228.0], [12.2, 229.0], [12.3, 229.0], [12.4, 230.0], [12.5, 231.0], [12.6, 231.0], [12.7, 232.0], [12.8, 232.0], [12.9, 232.0], [13.0, 232.0], [13.1, 233.0], [13.2, 233.0], [13.3, 233.0], [13.4, 233.0], [13.5, 234.0], [13.6, 234.0], [13.7, 234.0], [13.8, 235.0], [13.9, 236.0], [14.0, 236.0], [14.1, 237.0], [14.2, 237.0], [14.3, 237.0], [14.4, 237.0], [14.5, 238.0], [14.6, 238.0], [14.7, 238.0], [14.8, 239.0], [14.9, 239.0], [15.0, 240.0], [15.1, 240.0], [15.2, 241.0], [15.3, 241.0], [15.4, 241.0], [15.5, 241.0], [15.6, 241.0], [15.7, 242.0], [15.8, 243.0], [15.9, 244.0], [16.0, 245.0], [16.1, 246.0], [16.2, 246.0], [16.3, 247.0], [16.4, 247.0], [16.5, 248.0], [16.6, 249.0], [16.7, 249.0], [16.8, 249.0], [16.9, 250.0], [17.0, 251.0], [17.1, 252.0], [17.2, 252.0], [17.3, 253.0], [17.4, 253.0], [17.5, 254.0], [17.6, 255.0], [17.7, 256.0], [17.8, 256.0], [17.9, 257.0], [18.0, 257.0], [18.1, 258.0], [18.2, 258.0], [18.3, 258.0], [18.4, 258.0], [18.5, 259.0], [18.6, 260.0], [18.7, 260.0], [18.8, 261.0], [18.9, 261.0], [19.0, 261.0], [19.1, 262.0], [19.2, 263.0], [19.3, 263.0], [19.4, 263.0], [19.5, 264.0], [19.6, 264.0], [19.7, 264.0], [19.8, 264.0], [19.9, 265.0], [20.0, 265.0], [20.1, 266.0], [20.2, 266.0], [20.3, 266.0], [20.4, 267.0], [20.5, 267.0], [20.6, 268.0], [20.7, 268.0], [20.8, 268.0], [20.9, 269.0], [21.0, 269.0], [21.1, 269.0], [21.2, 269.0], [21.3, 270.0], [21.4, 270.0], [21.5, 271.0], [21.6, 271.0], [21.7, 271.0], [21.8, 272.0], [21.9, 272.0], [22.0, 272.0], [22.1, 272.0], [22.2, 272.0], [22.3, 272.0], [22.4, 273.0], [22.5, 274.0], [22.6, 274.0], [22.7, 274.0], [22.8, 275.0], [22.9, 275.0], [23.0, 275.0], [23.1, 275.0], [23.2, 276.0], [23.3, 276.0], [23.4, 277.0], [23.5, 277.0], [23.6, 278.0], [23.7, 278.0], [23.8, 278.0], [23.9, 278.0], [24.0, 278.0], [24.1, 278.0], [24.2, 279.0], [24.3, 279.0], [24.4, 279.0], [24.5, 280.0], [24.6, 280.0], [24.7, 281.0], [24.8, 281.0], [24.9, 281.0], [25.0, 281.0], [25.1, 282.0], [25.2, 282.0], [25.3, 283.0], [25.4, 283.0], [25.5, 284.0], [25.6, 285.0], [25.7, 285.0], [25.8, 286.0], [25.9, 287.0], [26.0, 288.0], [26.1, 289.0], [26.2, 289.0], [26.3, 290.0], [26.4, 290.0], [26.5, 290.0], [26.6, 291.0], [26.7, 291.0], [26.8, 292.0], [26.9, 293.0], [27.0, 293.0], [27.1, 293.0], [27.2, 293.0], [27.3, 294.0], [27.4, 294.0], [27.5, 294.0], [27.6, 294.0], [27.7, 295.0], [27.8, 295.0], [27.9, 295.0], [28.0, 296.0], [28.1, 296.0], [28.2, 297.0], [28.3, 298.0], [28.4, 298.0], [28.5, 299.0], [28.6, 299.0], [28.7, 300.0], [28.8, 300.0], [28.9, 301.0], [29.0, 302.0], [29.1, 303.0], [29.2, 303.0], [29.3, 304.0], [29.4, 304.0], [29.5, 304.0], [29.6, 304.0], [29.7, 305.0], [29.8, 305.0], [29.9, 305.0], [30.0, 306.0], [30.1, 307.0], [30.2, 307.0], [30.3, 308.0], [30.4, 309.0], [30.5, 311.0], [30.6, 311.0], [30.7, 312.0], [30.8, 312.0], [30.9, 313.0], [31.0, 314.0], [31.1, 315.0], [31.2, 316.0], [31.3, 317.0], [31.4, 318.0], [31.5, 319.0], [31.6, 320.0], [31.7, 323.0], [31.8, 327.0], [31.9, 327.0], [32.0, 329.0], [32.1, 332.0], [32.2, 334.0], [32.3, 335.0], [32.4, 337.0], [32.5, 339.0], [32.6, 342.0], [32.7, 344.0], [32.8, 345.0], [32.9, 346.0], [33.0, 347.0], [33.1, 348.0], [33.2, 349.0], [33.3, 349.0], [33.4, 350.0], [33.5, 350.0], [33.6, 350.0], [33.7, 351.0], [33.8, 351.0], [33.9, 352.0], [34.0, 352.0], [34.1, 353.0], [34.2, 353.0], [34.3, 354.0], [34.4, 354.0], [34.5, 354.0], [34.6, 355.0], [34.7, 355.0], [34.8, 356.0], [34.9, 356.0], [35.0, 359.0], [35.1, 363.0], [35.2, 365.0], [35.3, 367.0], [35.4, 369.0], [35.5, 369.0], [35.6, 370.0], [35.7, 370.0], [35.8, 371.0], [35.9, 372.0], [36.0, 372.0], [36.1, 373.0], [36.2, 374.0], [36.3, 374.0], [36.4, 374.0], [36.5, 375.0], [36.6, 375.0], [36.7, 376.0], [36.8, 376.0], [36.9, 376.0], [37.0, 376.0], [37.1, 376.0], [37.2, 377.0], [37.3, 377.0], [37.4, 377.0], [37.5, 378.0], [37.6, 378.0], [37.7, 378.0], [37.8, 379.0], [37.9, 379.0], [38.0, 379.0], [38.1, 379.0], [38.2, 380.0], [38.3, 380.0], [38.4, 380.0], [38.5, 380.0], [38.6, 381.0], [38.7, 381.0], [38.8, 381.0], [38.9, 381.0], [39.0, 381.0], [39.1, 382.0], [39.2, 382.0], [39.3, 382.0], [39.4, 382.0], [39.5, 382.0], [39.6, 383.0], [39.7, 383.0], [39.8, 383.0], [39.9, 383.0], [40.0, 384.0], [40.1, 384.0], [40.2, 384.0], [40.3, 385.0], [40.4, 385.0], [40.5, 385.0], [40.6, 385.0], [40.7, 386.0], [40.8, 386.0], [40.9, 386.0], [41.0, 387.0], [41.1, 387.0], [41.2, 387.0], [41.3, 387.0], [41.4, 387.0], [41.5, 388.0], [41.6, 388.0], [41.7, 388.0], [41.8, 389.0], [41.9, 389.0], [42.0, 389.0], [42.1, 390.0], [42.2, 390.0], [42.3, 390.0], [42.4, 390.0], [42.5, 391.0], [42.6, 391.0], [42.7, 391.0], [42.8, 392.0], [42.9, 392.0], [43.0, 392.0], [43.1, 392.0], [43.2, 392.0], [43.3, 392.0], [43.4, 392.0], [43.5, 393.0], [43.6, 393.0], [43.7, 393.0], [43.8, 393.0], [43.9, 393.0], [44.0, 393.0], [44.1, 393.0], [44.2, 393.0], [44.3, 393.0], [44.4, 393.0], [44.5, 393.0], [44.6, 393.0], [44.7, 393.0], [44.8, 393.0], [44.9, 393.0], [45.0, 393.0], [45.1, 394.0], [45.2, 394.0], [45.3, 394.0], [45.4, 394.0], [45.5, 394.0], [45.6, 394.0], [45.7, 394.0], [45.8, 394.0], [45.9, 394.0], [46.0, 395.0], [46.1, 395.0], [46.2, 395.0], [46.3, 395.0], [46.4, 395.0], [46.5, 395.0], [46.6, 395.0], [46.7, 395.0], [46.8, 395.0], [46.9, 395.0], [47.0, 395.0], [47.1, 395.0], [47.2, 395.0], [47.3, 395.0], [47.4, 396.0], [47.5, 396.0], [47.6, 396.0], [47.7, 396.0], [47.8, 396.0], [47.9, 396.0], [48.0, 396.0], [48.1, 396.0], [48.2, 396.0], [48.3, 396.0], [48.4, 396.0], [48.5, 396.0], [48.6, 396.0], [48.7, 396.0], [48.8, 396.0], [48.9, 396.0], [49.0, 396.0], [49.1, 396.0], [49.2, 396.0], [49.3, 396.0], [49.4, 396.0], [49.5, 396.0], [49.6, 396.0], [49.7, 397.0], [49.8, 397.0], [49.9, 397.0], [50.0, 397.0], [50.1, 397.0], [50.2, 397.0], [50.3, 397.0], [50.4, 397.0], [50.5, 397.0], [50.6, 397.0], [50.7, 397.0], [50.8, 397.0], [50.9, 397.0], [51.0, 397.0], [51.1, 397.0], [51.2, 397.0], [51.3, 397.0], [51.4, 397.0], [51.5, 397.0], [51.6, 397.0], [51.7, 397.0], [51.8, 397.0], [51.9, 397.0], [52.0, 398.0], [52.1, 398.0], [52.2, 398.0], [52.3, 398.0], [52.4, 398.0], [52.5, 398.0], [52.6, 398.0], [52.7, 398.0], [52.8, 398.0], [52.9, 398.0], [53.0, 398.0], [53.1, 398.0], [53.2, 398.0], [53.3, 398.0], [53.4, 398.0], [53.5, 398.0], [53.6, 398.0], [53.7, 398.0], [53.8, 398.0], [53.9, 398.0], [54.0, 398.0], [54.1, 398.0], [54.2, 398.0], [54.3, 399.0], [54.4, 399.0], [54.5, 399.0], [54.6, 399.0], [54.7, 399.0], [54.8, 399.0], [54.9, 399.0], [55.0, 399.0], [55.1, 399.0], [55.2, 399.0], [55.3, 399.0], [55.4, 399.0], [55.5, 399.0], [55.6, 399.0], [55.7, 399.0], [55.8, 399.0], [55.9, 399.0], [56.0, 399.0], [56.1, 400.0], [56.2, 400.0], [56.3, 400.0], [56.4, 400.0], [56.5, 400.0], [56.6, 400.0], [56.7, 400.0], [56.8, 401.0], [56.9, 401.0], [57.0, 401.0], [57.1, 401.0], [57.2, 401.0], [57.3, 401.0], [57.4, 401.0], [57.5, 402.0], [57.6, 402.0], [57.7, 402.0], [57.8, 402.0], [57.9, 402.0], [58.0, 402.0], [58.1, 402.0], [58.2, 402.0], [58.3, 402.0], [58.4, 402.0], [58.5, 402.0], [58.6, 402.0], [58.7, 402.0], [58.8, 402.0], [58.9, 402.0], [59.0, 403.0], [59.1, 403.0], [59.2, 403.0], [59.3, 403.0], [59.4, 403.0], [59.5, 403.0], [59.6, 403.0], [59.7, 403.0], [59.8, 403.0], [59.9, 403.0], [60.0, 403.0], [60.1, 403.0], [60.2, 403.0], [60.3, 404.0], [60.4, 404.0], [60.5, 404.0], [60.6, 404.0], [60.7, 404.0], [60.8, 404.0], [60.9, 404.0], [61.0, 404.0], [61.1, 404.0], [61.2, 404.0], [61.3, 404.0], [61.4, 405.0], [61.5, 405.0], [61.6, 405.0], [61.7, 405.0], [61.8, 405.0], [61.9, 405.0], [62.0, 405.0], [62.1, 405.0], [62.2, 406.0], [62.3, 406.0], [62.4, 406.0], [62.5, 406.0], [62.6, 406.0], [62.7, 406.0], [62.8, 406.0], [62.9, 406.0], [63.0, 406.0], [63.1, 406.0], [63.2, 406.0], [63.3, 406.0], [63.4, 406.0], [63.5, 406.0], [63.6, 406.0], [63.7, 406.0], [63.8, 406.0], [63.9, 406.0], [64.0, 406.0], [64.1, 406.0], [64.2, 407.0], [64.3, 407.0], [64.4, 407.0], [64.5, 407.0], [64.6, 407.0], [64.7, 407.0], [64.8, 407.0], [64.9, 407.0], [65.0, 407.0], [65.1, 407.0], [65.2, 408.0], [65.3, 408.0], [65.4, 408.0], [65.5, 408.0], [65.6, 408.0], [65.7, 408.0], [65.8, 409.0], [65.9, 409.0], [66.0, 409.0], [66.1, 409.0], [66.2, 409.0], [66.3, 409.0], [66.4, 409.0], [66.5, 410.0], [66.6, 410.0], [66.7, 410.0], [66.8, 410.0], [66.9, 410.0], [67.0, 410.0], [67.1, 410.0], [67.2, 411.0], [67.3, 411.0], [67.4, 411.0], [67.5, 411.0], [67.6, 411.0], [67.7, 411.0], [67.8, 412.0], [67.9, 412.0], [68.0, 412.0], [68.1, 412.0], [68.2, 412.0], [68.3, 412.0], [68.4, 412.0], [68.5, 413.0], [68.6, 413.0], [68.7, 413.0], [68.8, 413.0], [68.9, 413.0], [69.0, 413.0], [69.1, 413.0], [69.2, 413.0], [69.3, 413.0], [69.4, 413.0], [69.5, 413.0], [69.6, 413.0], [69.7, 413.0], [69.8, 413.0], [69.9, 414.0], [70.0, 414.0], [70.1, 414.0], [70.2, 414.0], [70.3, 414.0], [70.4, 414.0], [70.5, 414.0], [70.6, 414.0], [70.7, 414.0], [70.8, 414.0], [70.9, 414.0], [71.0, 414.0], [71.1, 414.0], [71.2, 414.0], [71.3, 414.0], [71.4, 414.0], [71.5, 414.0], [71.6, 414.0], [71.7, 414.0], [71.8, 415.0], [71.9, 415.0], [72.0, 415.0], [72.1, 415.0], [72.2, 415.0], [72.3, 415.0], [72.4, 415.0], [72.5, 415.0], [72.6, 415.0], [72.7, 415.0], [72.8, 416.0], [72.9, 416.0], [73.0, 416.0], [73.1, 416.0], [73.2, 416.0], [73.3, 416.0], [73.4, 416.0], [73.5, 417.0], [73.6, 417.0], [73.7, 417.0], [73.8, 417.0], [73.9, 417.0], [74.0, 417.0], [74.1, 417.0], [74.2, 417.0], [74.3, 417.0], [74.4, 418.0], [74.5, 418.0], [74.6, 418.0], [74.7, 418.0], [74.8, 418.0], [74.9, 418.0], [75.0, 418.0], [75.1, 418.0], [75.2, 418.0], [75.3, 418.0], [75.4, 418.0], [75.5, 418.0], [75.6, 418.0], [75.7, 418.0], [75.8, 418.0], [75.9, 418.0], [76.0, 419.0], [76.1, 419.0], [76.2, 419.0], [76.3, 419.0], [76.4, 419.0], [76.5, 419.0], [76.6, 419.0], [76.7, 419.0], [76.8, 419.0], [76.9, 419.0], [77.0, 419.0], [77.1, 420.0], [77.2, 420.0], [77.3, 420.0], [77.4, 420.0], [77.5, 420.0], [77.6, 420.0], [77.7, 420.0], [77.8, 420.0], [77.9, 420.0], [78.0, 420.0], [78.1, 420.0], [78.2, 420.0], [78.3, 420.0], [78.4, 421.0], [78.5, 421.0], [78.6, 421.0], [78.7, 421.0], [78.8, 421.0], [78.9, 421.0], [79.0, 421.0], [79.1, 421.0], [79.2, 421.0], [79.3, 421.0], [79.4, 421.0], [79.5, 421.0], [79.6, 421.0], [79.7, 421.0], [79.8, 421.0], [79.9, 422.0], [80.0, 422.0], [80.1, 422.0], [80.2, 422.0], [80.3, 422.0], [80.4, 422.0], [80.5, 422.0], [80.6, 422.0], [80.7, 422.0], [80.8, 422.0], [80.9, 422.0], [81.0, 422.0], [81.1, 422.0], [81.2, 422.0], [81.3, 422.0], [81.4, 423.0], [81.5, 423.0], [81.6, 423.0], [81.7, 423.0], [81.8, 423.0], [81.9, 423.0], [82.0, 423.0], [82.1, 423.0], [82.2, 423.0], [82.3, 423.0], [82.4, 423.0], [82.5, 424.0], [82.6, 424.0], [82.7, 424.0], [82.8, 424.0], [82.9, 424.0], [83.0, 424.0], [83.1, 424.0], [83.2, 424.0], [83.3, 424.0], [83.4, 424.0], [83.5, 425.0], [83.6, 425.0], [83.7, 425.0], [83.8, 425.0], [83.9, 425.0], [84.0, 425.0], [84.1, 425.0], [84.2, 425.0], [84.3, 425.0], [84.4, 426.0], [84.5, 426.0], [84.6, 426.0], [84.7, 426.0], [84.8, 426.0], [84.9, 426.0], [85.0, 426.0], [85.1, 427.0], [85.2, 427.0], [85.3, 427.0], [85.4, 427.0], [85.5, 427.0], [85.6, 427.0], [85.7, 428.0], [85.8, 428.0], [85.9, 428.0], [86.0, 429.0], [86.1, 429.0], [86.2, 429.0], [86.3, 430.0], [86.4, 430.0], [86.5, 431.0], [86.6, 431.0], [86.7, 431.0], [86.8, 431.0], [86.9, 432.0], [87.0, 432.0], [87.1, 432.0], [87.2, 433.0], [87.3, 433.0], [87.4, 433.0], [87.5, 433.0], [87.6, 434.0], [87.7, 434.0], [87.8, 435.0], [87.9, 435.0], [88.0, 435.0], [88.1, 435.0], [88.2, 435.0], [88.3, 436.0], [88.4, 436.0], [88.5, 436.0], [88.6, 437.0], [88.7, 437.0], [88.8, 437.0], [88.9, 438.0], [89.0, 439.0], [89.1, 439.0], [89.2, 439.0], [89.3, 440.0], [89.4, 440.0], [89.5, 441.0], [89.6, 442.0], [89.7, 444.0], [89.8, 445.0], [89.9, 445.0], [90.0, 446.0], [90.1, 458.0], [90.2, 482.0], [90.3, 504.0], [90.4, 505.0], [90.5, 506.0], [90.6, 507.0], [90.7, 508.0], [90.8, 509.0], [90.9, 510.0], [91.0, 527.0], [91.1, 527.0], [91.2, 527.0], [91.3, 528.0], [91.4, 528.0], [91.5, 528.0], [91.6, 528.0], [91.7, 528.0], [91.8, 528.0], [91.9, 528.0], [92.0, 529.0], [92.1, 529.0], [92.2, 529.0], [92.3, 529.0], [92.4, 530.0], [92.5, 530.0], [92.6, 530.0], [92.7, 530.0], [92.8, 530.0], [92.9, 530.0], [93.0, 530.0], [93.1, 530.0], [93.2, 531.0], [93.3, 531.0], [93.4, 531.0], [93.5, 531.0], [93.6, 531.0], [93.7, 531.0], [93.8, 531.0], [93.9, 531.0], [94.0, 531.0], [94.1, 531.0], [94.2, 532.0], [94.3, 536.0], [94.4, 536.0], [94.5, 537.0], [94.6, 537.0], [94.7, 537.0], [94.8, 538.0], [94.9, 538.0], [95.0, 538.0], [95.1, 538.0], [95.2, 538.0], [95.3, 539.0], [95.4, 539.0], [95.5, 539.0], [95.6, 539.0], [95.7, 539.0], [95.8, 539.0], [95.9, 540.0], [96.0, 540.0], [96.1, 540.0], [96.2, 541.0], [96.3, 541.0], [96.4, 542.0], [96.5, 543.0], [96.6, 543.0], [96.7, 543.0], [96.8, 544.0], [96.9, 544.0], [97.0, 545.0], [97.1, 546.0], [97.2, 546.0], [97.3, 546.0], [97.4, 546.0], [97.5, 546.0], [97.6, 547.0], [97.7, 547.0], [97.8, 547.0], [97.9, 547.0], [98.0, 547.0], [98.1, 547.0], [98.2, 547.0], [98.3, 547.0], [98.4, 547.0], [98.5, 547.0], [98.6, 547.0], [98.7, 547.0], [98.8, 547.0], [98.9, 547.0], [99.0, 547.0], [99.1, 547.0], [99.2, 548.0], [99.3, 548.0], [99.4, 548.0], [99.5, 548.0], [99.6, 548.0], [99.7, 548.0], [99.8, 548.0], [99.9, 548.0]], "isOverall": false, "label": "Sequelize - Get Trip", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 4884.0, "series": [{"data": [[0.0, 4884.0], [100.0, 111.0], [200.0, 5.0]], "isOverall": false, "label": "Raw - Get Trip", "isController": false}, {"data": [[0.0, 89.0], [300.0, 1373.0], [100.0, 357.0], [200.0, 985.0], [400.0, 1711.0], [500.0, 485.0]], "isOverall": false, "label": "Sequelize - Get Trip", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 485.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9515.0, "series": [{"data": [[0.0, 9515.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 485.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 408.1452000000005, "minX": 1.75022154E12, "maxY": 408.1452000000005, "series": [{"data": [[1.75022154E12, 408.1452000000005]], "isOverall": false, "label": "TG - Get Method - sequelize-vs-raw-query", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75022154E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.75, "minX": 1.0, "maxY": 440.0, "series": [{"data": [[96.0, 127.0], [97.0, 128.75], [99.0, 137.2], [102.0, 150.85714285714286], [107.0, 113.42857142857144], [108.0, 159.0], [110.0, 175.66666666666666], [111.0, 176.0], [112.0, 98.80000000000001], [113.0, 186.79999999999998], [116.0, 199.625], [119.0, 164.5], [117.0, 6.5], [120.0, 101.54545454545455], [121.0, 147.0], [126.0, 159.5], [125.0, 6.8], [124.0, 7.5], [128.0, 155.0], [129.0, 142.5], [131.0, 129.44444444444446], [133.0, 66.66666666666667], [134.0, 112.0], [135.0, 81.4], [130.0, 8.0], [138.0, 81.60000000000001], [142.0, 48.75], [143.0, 87.0], [141.0, 6.5], [139.0, 5.75], [144.0, 76.4], [145.0, 45.833333333333336], [146.0, 17.25], [147.0, 67.75], [149.0, 37.92307692307692], [154.0, 59.0], [155.0, 38.333333333333336], [158.0, 38.07692307692307], [159.0, 43.0], [157.0, 7.25], [153.0, 9.5], [164.0, 84.5], [165.0, 54.42105263157896], [163.0, 7.0], [162.0, 7.0], [161.0, 6.333333333333333], [169.0, 55.5], [170.0, 69.0], [171.0, 37.333333333333336], [172.0, 43.666666666666664], [173.0, 23.625], [174.0, 20.0], [168.0, 7.25], [176.0, 35.142857142857146], [177.0, 22.8], [178.0, 26.28571428571429], [179.0, 26.666666666666668], [180.0, 11.4], [181.0, 20.0], [182.0, 16.428571428571427], [183.0, 7.0], [184.0, 30.714285714285715], [185.0, 18.0], [188.0, 23.5], [189.0, 21.53846153846154], [186.0, 7.75], [193.0, 23.333333333333332], [195.0, 29.25], [196.0, 30.75], [197.0, 12.749999999999998], [198.0, 8.7], [199.0, 33.666666666666664], [192.0, 11.2], [200.0, 21.875], [201.0, 21.0], [203.0, 21.57142857142857], [206.0, 14.666666666666666], [207.0, 21.25], [204.0, 6.666666666666667], [210.0, 20.142857142857146], [212.0, 16.5], [214.0, 23.333333333333336], [213.0, 7.666666666666667], [211.0, 8.0], [216.0, 14.666666666666668], [217.0, 10.428571428571429], [219.0, 13.375], [221.0, 15.0], [222.0, 21.666666666666668], [223.0, 7.4], [220.0, 8.0], [225.0, 26.0], [226.0, 15.117647058823529], [227.0, 26.333333333333332], [231.0, 18.444444444444443], [230.0, 7.0], [229.0, 7.5], [224.0, 7.6], [232.0, 18.25], [233.0, 21.5], [234.0, 19.75], [235.0, 25.5], [237.0, 27.333333333333332], [239.0, 7.333333333333333], [236.0, 9.285714285714285], [240.0, 31.8], [242.0, 21.66666666666667], [243.0, 13.947368421052632], [246.0, 6.8], [244.0, 7.4], [241.0, 8.0], [255.0, 11.999999999999998], [253.0, 9.0], [249.0, 9.0], [248.0, 7.0], [268.0, 45.38461538461539], [261.0, 34.333333333333336], [260.0, 8.5], [262.0, 25.18181818181818], [263.0, 33.85714285714286], [257.0, 8.045454545454545], [259.0, 9.25], [258.0, 8.333333333333334], [265.0, 47.57142857142857], [266.0, 28.5], [267.0, 44.230769230769226], [271.0, 41.44444444444444], [270.0, 8.75], [273.0, 39.769230769230774], [272.0, 22.25], [274.0, 20.22222222222222], [275.0, 7.5], [284.0, 24.25], [287.0, 8.333333333333334], [285.0, 7.0], [276.0, 23.38461538461538], [277.0, 18.428571428571427], [278.0, 34.333333333333336], [279.0, 7.8], [280.0, 32.4], [281.0, 23.529411764705884], [283.0, 27.5], [282.0, 7.555555555555555], [289.0, 26.166666666666664], [288.0, 23.538461538461537], [290.0, 45.0], [300.0, 15.666666666666666], [301.0, 12.076923076923077], [302.0, 8.923076923076923], [303.0, 13.0], [296.0, 9.0], [292.0, 22.428571428571427], [294.0, 16.875000000000004], [295.0, 10.0], [297.0, 9.037037037037038], [298.0, 11.666666666666666], [299.0, 12.6], [318.0, 13.357142857142856], [305.0, 11.1875], [307.0, 10.363636363636363], [306.0, 8.6], [309.0, 9.222222222222221], [308.0, 8.272727272727273], [311.0, 8.0], [304.0, 9.25], [312.0, 12.0], [314.0, 16.5], [315.0, 11.277777777777779], [319.0, 18.666666666666668], [313.0, 7.142857142857143], [322.0, 14.166666666666666], [321.0, 14.0], [323.0, 13.6], [332.0, 13.25], [334.0, 12.75], [335.0, 11.777777777777777], [325.0, 10.6], [324.0, 9.333333333333334], [326.0, 13.0], [327.0, 11.454545454545455], [320.0, 8.5], [328.0, 15.666666666666668], [329.0, 10.692307692307695], [330.0, 12.777777777777779], [331.0, 12.5], [339.0, 14.333333333333334], [336.0, 14.166666666666666], [343.0, 8.75], [340.0, 8.25], [337.0, 8.428571428571429], [338.0, 13.333333333333334], [344.0, 13.761904761904763], [346.0, 19.0], [345.0, 10.0], [349.0, 20.043478260869566], [348.0, 9.4], [350.0, 9.307692307692308], [351.0, 9.0], [366.0, 8.0], [352.0, 9.666666666666666], [357.0, 16.160000000000004], [358.0, 8.75], [362.0, 16.0], [363.0, 16.5], [367.0, 13.4], [365.0, 8.133333333333333], [355.0, 9.6], [353.0, 11.4], [361.0, 9.75], [360.0, 9.25], [371.0, 16.42857142857143], [369.0, 16.8], [368.0, 19.666666666666668], [375.0, 7.6], [374.0, 8.2], [370.0, 15.14285714285714], [372.0, 27.0], [373.0, 9.714285714285715], [376.0, 21.266666666666666], [377.0, 23.933333333333334], [383.0, 8.333333333333334], [382.0, 7.857142857142857], [381.0, 7.555555555555555], [380.0, 9.222222222222221], [396.0, 20.5], [389.0, 29.0], [384.0, 21.250000000000004], [386.0, 8.333333333333334], [385.0, 8.4], [391.0, 7.5], [390.0, 7.5], [388.0, 10.4], [392.0, 23.499999999999996], [393.0, 25.1], [394.0, 43.0], [395.0, 43.666666666666664], [399.0, 38.68421052631579], [398.0, 9.0], [397.0, 8.666666666666666], [402.0, 26.0], [401.0, 33.22222222222222], [403.0, 54.545454545454554], [412.0, 39.4], [413.0, 32.2], [414.0, 21.5], [404.0, 24.4], [405.0, 38.60000000000001], [406.0, 50.470588235294116], [407.0, 44.666666666666664], [408.0, 46.400000000000006], [409.0, 29.266666666666666], [411.0, 9.0], [417.0, 28.142857142857142], [418.0, 13.727272727272725], [419.0, 9.0], [428.0, 23.0], [429.0, 20.0], [431.0, 9.875], [420.0, 11.0], [421.0, 15.88888888888889], [422.0, 21.714285714285715], [423.0, 18.4], [416.0, 8.25], [424.0, 9.222222222222221], [426.0, 19.200000000000003], [427.0, 16.22222222222222], [439.0, 14.692307692307692], [433.0, 16.153846153846153], [436.0, 14.5], [437.0, 14.09090909090909], [438.0, 12.5], [441.0, 14.5], [442.0, 10.538461538461538], [443.0, 13.0], [445.0, 10.636363636363637], [446.0, 12.555555555555555], [447.0, 8.666666666666666], [440.0, 9.0], [450.0, 17.166666666666664], [448.0, 10.363636363636365], [449.0, 9.0], [451.0, 17.22222222222222], [460.0, 15.2], [461.0, 11.833333333333334], [462.0, 15.428571428571429], [463.0, 11.933333333333334], [452.0, 20.75], [453.0, 15.428571428571429], [454.0, 19.999999999999996], [455.0, 18.5], [457.0, 14.2], [458.0, 14.166666666666666], [459.0, 13.545454545454545], [466.0, 12.714285714285714], [467.0, 14.307692307692308], [468.0, 13.333333333333332], [469.0, 15.302325581395346], [470.0, 16.5], [471.0, 13.083333333333332], [465.0, 9.0], [464.0, 9.5], [474.0, 17.166666666666668], [479.0, 12.2], [476.0, 19.2], [477.0, 14.499999999999998], [478.0, 18.42857142857143], [481.0, 16.142857142857142], [482.0, 15.285714285714285], [483.0, 13.0], [492.0, 12.090909090909092], [493.0, 12.600000000000001], [494.0, 10.875], [495.0, 11.666666666666666], [484.0, 10.333333333333334], [485.0, 12.399999999999999], [486.0, 12.8], [487.0, 9.857142857142858], [488.0, 13.208333333333336], [489.0, 12.833333333333332], [490.0, 12.181818181818182], [491.0, 11.777777777777779], [496.0, 15.214285714285717], [499.0, 12.142857142857144], [500.0, 12.035240464344943], [498.0, 11.53846153846154], [497.0, 10.0]], "isOverall": false, "label": "Raw - Get Trip", "isController": false}, {"data": [[409.43939999999924, 18.21320000000002]], "isOverall": false, "label": "Raw - Get Trip-Aggregated", "isController": false}, {"data": [[2.0, 35.0], [3.0, 37.0], [4.0, 37.0], [5.0, 36.0], [6.0, 37.0], [7.0, 39.0], [8.0, 38.0], [9.0, 40.0], [10.0, 41.0], [11.0, 41.0], [12.0, 40.0], [13.0, 45.0], [14.0, 45.0], [15.0, 47.0], [16.0, 47.0], [17.0, 47.0], [18.0, 46.0], [19.0, 47.0], [20.0, 49.0], [21.0, 48.0], [22.0, 49.0], [23.0, 51.0], [24.0, 52.0], [25.0, 52.0], [26.0, 55.0], [27.0, 58.0], [28.0, 59.0], [29.0, 59.0], [30.0, 59.0], [31.0, 59.0], [33.0, 61.0], [32.0, 60.0], [35.0, 65.0], [34.0, 62.0], [37.0, 64.0], [36.0, 65.0], [39.0, 67.0], [38.0, 66.0], [41.0, 68.0], [40.0, 66.0], [43.0, 68.0], [42.0, 69.0], [45.0, 72.0], [44.0, 68.0], [47.0, 74.0], [46.0, 72.0], [49.0, 74.0], [48.0, 75.0], [51.0, 76.0], [50.0, 74.0], [53.0, 76.0], [52.0, 77.0], [55.0, 77.0], [54.0, 77.0], [57.0, 78.0], [56.0, 78.0], [59.0, 80.0], [58.0, 79.0], [61.0, 83.0], [60.0, 82.0], [63.0, 84.0], [62.0, 84.0], [67.0, 86.0], [66.0, 86.0], [65.0, 86.0], [64.0, 85.0], [71.0, 90.0], [70.0, 89.0], [69.0, 88.0], [68.0, 86.0], [75.0, 92.0], [74.0, 90.0], [73.0, 90.0], [72.0, 90.0], [79.0, 94.0], [78.0, 94.0], [77.0, 93.0], [76.0, 92.0], [82.0, 96.0], [81.0, 96.0], [80.0, 94.0], [87.0, 98.0], [86.0, 98.0], [85.0, 96.33333333333333], [91.0, 100.0], [90.0, 100.0], [89.0, 100.0], [88.0, 98.0], [95.0, 105.0], [94.0, 102.0], [93.0, 101.0], [92.0, 102.0], [99.0, 106.0], [98.0, 106.0], [97.0, 106.0], [96.0, 106.0], [103.0, 111.0], [102.0, 111.0], [101.0, 111.0], [100.0, 109.0], [107.0, 112.0], [106.0, 113.0], [105.0, 110.0], [104.0, 110.0], [111.0, 116.0], [110.0, 110.0], [109.0, 111.0], [108.0, 111.0], [115.0, 117.0], [114.0, 115.0], [113.0, 115.0], [112.0, 116.0], [119.0, 117.0], [118.0, 118.0], [117.0, 115.66666666666667], [116.0, 117.0], [123.0, 121.0], [122.0, 120.0], [121.0, 119.5], [120.0, 116.5], [126.0, 110.0], [127.0, 124.0], [125.0, 127.0], [124.0, 123.5], [129.0, 113.5], [133.0, 126.7142857142857], [135.0, 129.5], [134.0, 129.0], [132.0, 128.0], [131.0, 128.0], [130.0, 126.5], [128.0, 125.0], [137.0, 137.5], [138.0, 141.75], [139.0, 137.5], [140.0, 140.0], [143.0, 132.0], [142.0, 132.0], [141.0, 133.0], [136.0, 128.0], [144.0, 146.4], [145.0, 139.14285714285714], [147.0, 145.6], [148.0, 153.0], [149.0, 153.66666666666666], [150.0, 155.75], [151.0, 136.5], [146.0, 135.0], [155.0, 173.5], [159.0, 161.5], [158.0, 141.0], [157.0, 139.33333333333334], [156.0, 137.5], [154.0, 139.0], [153.0, 138.25], [152.0, 139.0], [160.0, 175.8], [165.0, 195.33333333333331], [167.0, 150.0], [166.0, 147.5], [164.0, 149.0], [163.0, 148.125], [162.0, 147.0], [161.0, 144.42857142857144], [169.0, 193.8], [170.0, 169.66666666666666], [171.0, 195.99999999999997], [174.0, 184.4], [175.0, 154.5], [173.0, 154.0], [172.0, 153.0], [168.0, 148.66666666666666], [177.0, 193.22222222222223], [179.0, 202.66666666666666], [181.0, 205.33333333333334], [182.0, 194.0], [183.0, 185.84615384615387], [180.0, 155.8], [178.0, 155.5], [176.0, 156.0], [184.0, 190.0], [185.0, 203.0], [189.0, 201.42857142857142], [191.0, 167.0], [190.0, 166.0], [188.0, 166.0], [187.0, 164.0], [186.0, 164.33333333333334], [193.0, 194.8], [195.0, 217.5], [196.0, 219.2], [197.0, 178.53333333333336], [198.0, 187.58823529411762], [199.0, 175.0], [194.0, 172.0], [192.0, 167.0], [200.0, 213.57142857142858], [201.0, 208.88888888888889], [203.0, 223.0], [206.0, 209.5], [207.0, 223.5], [205.0, 180.33333333333334], [204.0, 179.0], [202.0, 177.0], [209.0, 210.0], [210.0, 234.83333333333334], [212.0, 227.25], [214.0, 216.33333333333331], [215.0, 188.0], [213.0, 187.0], [211.0, 185.75], [208.0, 181.0], [216.0, 231.33333333333331], [217.0, 197.6], [219.0, 212.1818181818182], [221.0, 225.66666666666669], [223.0, 193.0], [222.0, 191.33333333333334], [220.0, 191.4], [218.0, 191.0], [224.0, 212.10000000000002], [225.0, 217.0], [226.0, 200.64705882352942], [227.0, 222.75], [231.0, 215.69230769230768], [230.0, 200.75], [229.0, 198.5], [228.0, 200.0], [232.0, 210.6], [233.0, 229.0], [235.0, 235.0], [237.0, 241.83333333333334], [239.0, 206.0], [238.0, 205.0], [236.0, 204.875], [234.0, 204.0], [242.0, 245.50000000000003], [243.0, 249.02083333333334], [246.0, 216.66666666666666], [247.0, 209.0], [245.0, 208.5], [244.0, 208.66666666666666], [241.0, 206.75], [240.0, 204.66666666666666], [248.0, 214.47368421052633], [253.0, 229.66666666666666], [255.0, 224.59999999999997], [254.0, 219.0], [252.0, 220.0], [251.0, 220.0], [250.0, 220.0], [249.0, 217.5], [268.0, 250.83333333333331], [259.0, 235.44444444444446], [258.0, 229.5], [257.0, 224.56521739130432], [256.0, 220.0], [261.0, 238.0], [260.0, 233.0], [262.0, 233.28571428571428], [263.0, 243.1], [265.0, 243.33333333333334], [266.0, 243.5], [267.0, 241.15384615384616], [271.0, 248.0], [264.0, 234.5], [270.0, 239.75], [269.0, 239.0], [286.0, 258.0], [272.0, 246.36363636363635], [273.0, 256.33333333333337], [275.0, 240.66666666666666], [274.0, 241.0], [285.0, 257.0], [284.0, 257.0], [276.0, 248.86666666666667], [277.0, 247.5], [278.0, 263.0], [279.0, 249.0], [281.0, 259.4], [282.0, 255.25], [283.0, 266.5], [287.0, 258.0], [280.0, 249.0], [300.0, 284.83333333333337], [288.0, 270.45454545454544], [289.0, 279.2], [291.0, 261.0], [290.0, 259.0], [292.0, 282.14285714285717], [293.0, 283.0], [294.0, 280.3], [295.0, 263.83333333333337], [297.0, 268.7142857142857], [299.0, 286.3333333333333], [298.0, 268.5], [301.0, 276.58333333333337], [302.0, 273.33333333333337], [303.0, 280.5714285714286], [296.0, 264.3333333333333], [318.0, 278.7727272727273], [305.0, 277.0], [304.0, 273.0], [307.0, 274.8888888888889], [306.0, 272.25], [317.0, 290.0], [316.0, 289.0], [309.0, 276.85714285714283], [308.0, 274.2777777777778], [310.0, 276.5], [311.0, 277.4], [312.0, 276.3636363636364], [314.0, 273.66666666666663], [313.0, 280.42857142857144], [315.0, 280.42857142857144], [319.0, 289.0], [332.0, 275.5], [321.0, 266.8333333333333], [323.0, 269.0], [322.0, 292.5], [324.0, 282.42857142857144], [325.0, 293.6], [326.0, 275.6666666666667], [327.0, 286.3333333333333], [320.0, 291.5], [328.0, 277.0], [329.0, 289.7727272727273], [331.0, 269.8181818181818], [330.0, 297.0], [334.0, 292.875], [333.0, 298.0], [335.0, 283.5], [339.0, 282.75], [336.0, 279.3333333333333], [343.0, 311.0], [342.0, 308.5], [341.0, 308.0], [340.0, 310.0], [337.0, 297.41666666666674], [338.0, 286.875], [344.0, 290.7037037037037], [345.0, 315.14285714285717], [347.0, 318.0], [346.0, 317.0], [349.0, 293.88888888888886], [351.0, 346.0], [350.0, 337.62500000000006], [348.0, 315.8333333333333], [367.0, 325.0833333333333], [357.0, 310.55000000000007], [356.0, 353.0], [358.0, 354.5], [363.0, 314.07692307692304], [365.0, 345.63157894736844], [366.0, 336.5], [364.0, 351.0], [355.0, 352.07142857142856], [354.0, 350.6666666666667], [353.0, 352.0], [352.0, 349.2857142857143], [359.0, 354.0], [362.0, 351.0], [361.0, 352.8333333333333], [360.0, 354.875], [371.0, 319.7142857142857], [368.0, 325.0], [369.0, 336.1666666666667], [370.0, 315.0], [373.0, 327.75], [372.0, 369.0], [374.0, 370.0], [375.0, 375.304347826087], [376.0, 318.3703703703704], [377.0, 321.9428571428571], [378.0, 338.5], [379.0, 384.0], [383.0, 394.4], [382.0, 391.25], [381.0, 387.9230769230769], [380.0, 384.5714285714286], [398.0, 411.7142857142857], [392.0, 371.3076923076923], [384.0, 310.2142857142858], [385.0, 396.4], [387.0, 397.5], [386.0, 398.5], [391.0, 407.0], [390.0, 405.0], [389.0, 404.0], [388.0, 400.6], [393.0, 349.3333333333333], [394.0, 371.8], [395.0, 363.5], [399.0, 355.37500000000006], [397.0, 411.2], [396.0, 412.0], [402.0, 405.6666666666667], [401.0, 374.6363636363636], [400.0, 412.0], [403.0, 383.40000000000003], [412.0, 366.2], [414.0, 392.93333333333334], [413.0, 424.5], [415.0, 425.3333333333333], [404.0, 377.5], [405.0, 407.6666666666667], [406.0, 347.3636363636363], [407.0, 364.25], [408.0, 371.0], [409.0, 377.25], [410.0, 388.5], [411.0, 424.3333333333333], [416.0, 403.3333333333333], [417.0, 392.75], [419.0, 431.75], [418.0, 430.625], [428.0, 405.49999999999994], [429.0, 405.0], [431.0, 384.33333333333337], [424.0, 433.1111111111111], [430.0, 435.6666666666667], [420.0, 408.08333333333337], [421.0, 408.6666666666667], [422.0, 386.1666666666667], [423.0, 419.0], [425.0, 411.83333333333337], [426.0, 385.25], [427.0, 406.72727272727275], [439.0, 391.1666666666667], [433.0, 403.55555555555554], [432.0, 435.0], [435.0, 436.0], [434.0, 436.0], [436.0, 389.1666666666667], [437.0, 408.4], [438.0, 397.0], [441.0, 399.7142857142857], [442.0, 408.8125], [443.0, 412.0], [444.0, 400.14285714285717], [446.0, 397.30769230769226], [445.0, 440.0], [447.0, 440.0], [440.0, 438.0], [449.0, 432.2], [448.0, 432.0769230769231], [450.0, 413.75], [451.0, 409.375], [452.0, 435.1], [453.0, 390.125], [454.0, 399.62499999999994], [455.0, 403.6666666666667], [456.0, 422.875], [462.0, 400.8], [463.0, 411.75000000000006], [460.0, 399.6666666666667], [461.0, 412.6666666666667], [457.0, 425.35], [458.0, 396.5], [459.0, 406.6666666666667], [465.0, 413.59999999999997], [464.0, 413.875], [466.0, 412.5], [467.0, 405.5], [468.0, 409.3333333333333], [469.0, 412.8461538461538], [470.0, 406.2], [471.0, 405.5714285714286], [474.0, 411.3333333333333], [476.0, 425.5], [477.0, 408.8], [478.0, 425.8], [479.0, 415.42857142857144], [473.0, 412.0], [472.0, 411.0], [475.0, 409.0], [482.0, 419.17391304347825], [481.0, 416.1666666666667], [480.0, 430.3333333333333], [483.0, 421.0], [492.0, 417.31249999999994], [494.0, 414.8999999999999], [493.0, 423.0], [495.0, 403.25000000000006], [484.0, 418.0], [485.0, 421.4], [486.0, 419.42857142857144], [487.0, 419.1666666666667], [488.0, 418.0909090909091], [489.0, 411.09090909090907], [490.0, 417.71428571428567], [491.0, 411.125], [496.0, 403.2857142857143], [498.0, 417.8181818181818], [499.0, 416.57142857142856], [500.0, 431.75664451827197], [497.0, 422.0], [1.0, 35.0]], "isOverall": false, "label": "Sequelize - Get Trip", "isController": false}, {"data": [[406.8510000000001, 360.44219999999973]], "isOverall": false, "label": "Sequelize - Get Trip-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 22666.666666666668, "minX": 1.75022154E12, "maxY": 75000.0, "series": [{"data": [[1.75022154E12, 75000.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75022154E12, 22666.666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75022154E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 18.21320000000002, "minX": 1.75022154E12, "maxY": 360.44219999999973, "series": [{"data": [[1.75022154E12, 18.21320000000002]], "isOverall": false, "label": "Raw - Get Trip", "isController": false}, {"data": [[1.75022154E12, 360.44219999999973]], "isOverall": false, "label": "Sequelize - Get Trip", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75022154E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 18.20819999999997, "minX": 1.75022154E12, "maxY": 360.43719999999956, "series": [{"data": [[1.75022154E12, 18.20819999999997]], "isOverall": false, "label": "Raw - Get Trip", "isController": false}, {"data": [[1.75022154E12, 360.43719999999956]], "isOverall": false, "label": "Sequelize - Get Trip", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75022154E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75022154E12, "maxY": 0.43300000000000205, "series": [{"data": [[1.75022154E12, 0.43300000000000205]], "isOverall": false, "label": "Raw - Get Trip", "isController": false}, {"data": [[1.75022154E12, 0.0]], "isOverall": false, "label": "Sequelize - Get Trip", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75022154E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.75022154E12, "maxY": 548.0, "series": [{"data": [[1.75022154E12, 548.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75022154E12, 422.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75022154E12, 547.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75022154E12, 446.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75022154E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75022154E12, 111.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75022154E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 36.0, "minX": 1068.0, "maxY": 393.0, "series": [{"data": [[1068.0, 66.0], [2084.0, 36.0], [2386.0, 149.0], [2451.0, 370.0], [2011.0, 393.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2451.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 36.0, "minX": 1068.0, "maxY": 393.0, "series": [{"data": [[1068.0, 66.0], [2084.0, 36.0], [2386.0, 149.0], [2451.0, 370.0], [2011.0, 393.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2451.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.75022154E12, "maxY": 166.66666666666666, "series": [{"data": [[1.75022154E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75022154E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.75022154E12, "maxY": 166.66666666666666, "series": [{"data": [[1.75022154E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75022154E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.75022154E12, "maxY": 83.33333333333333, "series": [{"data": [[1.75022154E12, 83.33333333333333]], "isOverall": false, "label": "Raw - Get Trip-success", "isController": false}, {"data": [[1.75022154E12, 83.33333333333333]], "isOverall": false, "label": "Sequelize - Get Trip-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75022154E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.75022154E12, "maxY": 166.66666666666666, "series": [{"data": [[1.75022154E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75022154E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

